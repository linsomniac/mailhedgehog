#!/usr/bin/env python3

from quart import (
    Quart, make_push_promise, url_for, websocket)
from pathlib import Path
from quart.json import dumps
from werkzeug.exceptions import NotFound
import asyncio
from aiosmtpd.smtp import SMTP
from functools import partial, wraps
from collections import deque
from mail import format_message

ConfigMaxMessages = 100
ConfigSmtpPort = 1025
ConfigHttpPort = 8025
ConfigHttpAddress = ''
ConfigDebug = True
#  Generate with: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
ConfigCertFile = None  # 'cert.pem'
ConfigKeyFile = None   # 'key.pem'

connected_websockets = set()
global_messages = deque(maxlen=ConfigMaxMessages)

app = Quart(__name__)


@app.before_serving
async def startup() -> None:
    class SmtpHandler:
        async def handle_DATA(self, server, session, envelope):
            message = format_message(session, envelope)
            global_messages.appendleft(message)
            for queue in connected_websockets:
                await queue.put(dumps(message))
            return '250 OK'

    loop = asyncio.get_event_loop()
    app.smtp_server = loop.create_server(
        partial(SMTP, SmtpHandler()), port=ConfigSmtpPort)
    loop.create_task(app.smtp_server)


@app.after_serving
async def cleanup() -> None:
    app.smtp_server.close()


@app.route('/')
async def index() -> str:
    #  Needs certfile and keyfile
    await make_push_promise(url_for('static', filename='js/controllers.js'))
    await make_push_promise(url_for('static', filename='js/strutil.js'))
    await make_push_promise(url_for('static', filename='images/hog.png'))
    await make_push_promise(url_for('static', filename='images/github.png'))
    await make_push_promise(url_for('static', filename='css/style.css'))
    return Path('templates/index.html').read_text()


@app.route('/api/v2/messages', methods=['GET'])
async def messages() -> dict:
    return {
        'count': len(global_messages),
        'start': 0,
        'total': len(global_messages),
        'items': list(global_messages),
        }


@app.route('/api/v1/messages', methods=['DELETE'])
async def delete_all_messages() -> str:
    global_messages.clear()
    return 'OK'


@app.route('/api/v1/messages/<msgid>', methods=['GET'])
async def message(msgid: str) -> deque:
    for m in global_messages:
        if m['ID'] == msgid:
            return m

    raise NotFound()


def collect_websocket(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        global connected_websockets
        queue = asyncio.Queue()
        connected_websockets.add(queue)
        try:
            return await func(queue, *args, **kwargs)
        finally:
            connected_websockets.remove(queue)
    return wrapper


@app.websocket('/api/v2/websocket')
@collect_websocket
async def ws(queue):
    while True:
        data = await queue.get()
        await websocket.send(data)


app.run(
    port=ConfigHttpPort, host=ConfigHttpAddress, debug=ConfigDebug,
    certfile=ConfigCertFile, keyfile=ConfigKeyFile)
