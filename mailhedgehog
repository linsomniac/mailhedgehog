#!/usr/bin/env python3

from quart import (
    Quart, jsonify, make_push_promise,
    url_for, websocket)
from quart.json import dumps
from quart.exceptions import NotFound
import asyncio
from aiosmtpd.smtp import SMTP
from functools import partial, wraps
from collections import deque
from email import message_from_bytes, message_from_string
from email.utils import parseaddr
import time
import datetime
from uuid import uuid4

ConfigMaxMessages = 100
ConfigSmtpPort = 1025
ConfigHttpPort = 8025
ConfigHttpAddress = ''
ConfigDebug = True
#  Generate with: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
ConfigCertFile = None  # 'cert.pem'
ConfigKeyFile = None   # 'key.pem'

connected_websockets = set()
global_messages = deque(maxlen=ConfigMaxMessages)

app = Quart(__name__)


def format_message(session, envelope):
    def iso_time():
        utc_offset_sec = time.altzone if time.localtime().tm_isdst else time.timezone
        utc_offset = datetime.timedelta(seconds=-utc_offset_sec)
        return datetime.datetime.now().replace(
            tzinfo=datetime.timezone(offset=utc_offset)).isoformat()

    def format_address(addr):
        realname, email = parseaddr(addr)
        lhs, rhs = email.split('@')
        return {
            'Domain': rhs,
            'Mailbox': lhs,
            'Params': '',
            'Relays': None,
        }

    data = message_from_bytes(envelope.content)
    return {
        'Content': {
            'Headers': dict({x:[y] for (x,y) in data.items()}),
            'Body': data.get_payload(),
            'MIME': None,
            'Size': len(envelope.content),
            },
        'Created': iso_time(),
        'From': format_address(data['From']),
        'ID': str(uuid4()) + '@mailweasel.example',
        'To': [format_address(data['To'])],
        'Raw': {
            'Data': envelope.content.decode(),
            'From': envelope.mail_from,
            'To': envelope.rcpt_tos,
            'Helo': session.host_name,
        }
    }


@app.before_serving
async def startup():
    class SmtpHandler:
        async def handle_DATA(self, server, session, envelope):
            message = format_message(session, envelope)
            global_messages.appendleft(message)
            for ws in connected_websockets:
                await ws.send(dumps(message))
            return '250 OK'

    loop = asyncio.get_event_loop()
    loop.create_task(loop.create_server(
        partial(SMTP, SmtpHandler()), port=ConfigSmtpPort))

@app.route('/')
async def index():
    #  Needs certfile and keyfile
    await make_push_promise(url_for('static', filename='js/controllers.js'))
    await make_push_promise(url_for('static', filename='js/strutil.js'))
    await make_push_promise(url_for('static', filename='images/hog.png'))
    await make_push_promise(url_for('static', filename='images/github.png'))
    await make_push_promise(url_for('static', filename='css/style.css'))
    return open('templates/index.html', 'r').read()


@app.route('/api/v2/messages', methods=['GET'])
async def messages():
    return jsonify({
        'count': len(global_messages),
        'start': 0,
        'total': len(global_messages),
        'items': list(global_messages),
        })


@app.route('/api/v1/messages', methods=['DELETE'])
async def delete_all_messages():
    global_messages.clear()
    return 'OK'


@app.route('/api/v1/messages/<msgid>', methods=['GET'])
async def message(msgid):
    for m in global_messages:
        if m['ID'] == msgid:
            return jsonify(m)

    raise NotFound()


def collect_websocket(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        global connected_websockets
        connected_websockets.add(websocket._get_current_object())
        try:
            return await func(*args, **kwargs)
        finally:
            connected_websockets.remove(websocket._get_current_object())
    return wrapper


@app.websocket('/api/v2/websocket')
@collect_websocket
async def ws():
    while True:
        data = await websocket.receive()
        print(f'Websocket: {data}')


app.run(
    port=ConfigHttpPort, host=ConfigHttpAddress, debug=ConfigDebug,
    certfile=ConfigCertFile, keyfile=ConfigKeyFile)
